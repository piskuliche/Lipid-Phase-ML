diff --git a/mllpa/__init__.py b/mllpa/__init__.py
index d004836..2674015 100755
--- a/mllpa/__init__.py
+++ b/mllpa/__init__.py
@@ -46,7 +46,7 @@ def openSystem(coordinates_file, structure_file, type, **kwargs):
     Output(s):
         system {class System} -- Instance of the system classes containing all the informations on the system as well as the positions and configurations.
     """
-
+    #nlipids = int(kwargs.get('nlipids',32))
     # Get the information on the molecules
     if kwargs.get('type_info', None) is None:
         kwargs['type_info'] = getMolInfos(structure_file, type)
@@ -355,10 +355,10 @@ def extractPositions(coordinates_file, type, **kwargs):
     begin = kwargs.get('begin', 0)
     end = kwargs.get('end', None)
     step = kwargs.get('step', 1)
+    #nlipids = int(kwargs.get('nlipids',32))
 
     # Run the function
     positions, boxes = _get_positions(coordinates_file, type=type, trj=trj, heavy=heavy, type_info=type_info, begin=begin, end=end, step=step)
-
     return positions, boxes
 
 ##-\-\-\-\-\-\-\-\-\-\-\
@@ -623,7 +623,7 @@ def summonGhosts(systems, geometry='bilayer', exclude_ghosts=None):
         if process_ghosts:
 
             # Create the ghosts
-            mol_ghosts = generateGhosts(representation.positions, mol_type.positions, mol_type.infos['resids'], representation.leaflets, geometry=geometry)
+            mol_ghosts = generateGhosts(representation.positions, mol_type.positions, mol_type.infos['resids']-1, representation.leaflets, geometry=geometry)
 
             # Append the ghosts to the list
             all_ghosts.append(np.copy(mol_ghosts))
diff --git a/mllpa/configurations/distances.py b/mllpa/configurations/distances.py
index 0ba0dfb..19c09e8 100755
--- a/mllpa/configurations/distances.py
+++ b/mllpa/configurations/distances.py
@@ -185,7 +185,6 @@ def computeDistances(positions, ranked_bonds_ids):
         for (i, j) in ranked_bonds_ids:
             a = hstack((a, (i + arange(moleculeNbr) * atomNbr)))
             b = hstack((b, (j + arange(moleculeNbr) * atomNbr)))
-
         # Calculate the distances and return the resulting array
         vectdist = (positions[frame][a] - positions[frame][b])
 
diff --git a/mllpa/input_output.py b/mllpa/input_output.py
index d37c04e..73369c8 100755
--- a/mllpa/input_output.py
+++ b/mllpa/input_output.py
@@ -19,7 +19,7 @@ from mllpa.interface_communication import _is_file, _is_file_is, _error_extensio
 
 # -----------------------------
 # Check the input file provided
-def _check_input_file(file, extensions=[".gro"]):
+def _check_input_file(file, extensions=[".gro","data"]):
 
     # Check if the file exists
     if not _is_file(file):
@@ -31,7 +31,7 @@ def _check_input_file(file, extensions=[".gro"]):
 
 # -------------------------------
 # Check the extension of the file
-def _check_extension(file, extensions=[".gro"], stop=False, error=True): # argument(s) error is now deprecated. Please remove
+def _check_extension(file, extensions=[".gro",".data"], stop=False, error=True): # argument(s) error is now deprecated. Please remove
 
     # Check the extension
     if not _is_file_is(file, extensions=extensions, exist=stop, no_extension=stop):
diff --git a/mllpa/interface_communication.py b/mllpa/interface_communication.py
index a557ba0..dc47bd9 100755
--- a/mllpa/interface_communication.py
+++ b/mllpa/interface_communication.py
@@ -163,7 +163,7 @@ def _is_array_of(data, type='string', recursive=True, **kwargs):
 
 # ------------------------
 # Get the decision message
-def _error_decision_message(stop=True, extensions=['.gro']):
+def _error_decision_message(stop=True, extensions=['.gro',".data"]):
 
     if stop:
         decision_text = " The program will now be interrupted."
diff --git a/mllpa/model_generation.py b/mllpa/model_generation.py
index 1b07c3b..ded4cf7 100755
--- a/mllpa/model_generation.py
+++ b/mllpa/model_generation.py
@@ -300,10 +300,10 @@ def _prediction_array(coordinates_space, distance_space, models):
 # ----------------------------------
 # Predict the state of the molecules
 def makePredictions(coordinates, distances, models):
-
+    #print("checkmp1",flush=True)
     # Get the predictions array from the models
     individual_predictions = _prediction_array(coordinates, distances, models)
-
+    #print("checkmp2",flush=True)
     # Make the final decision
     final_predictions = _final_decision(individual_predictions, models)
 
diff --git a/mllpa/neighbour_analysis.py b/mllpa/neighbour_analysis.py
index d6d1110..3592197 100755
--- a/mllpa/neighbour_analysis.py
+++ b/mllpa/neighbour_analysis.py
@@ -119,7 +119,6 @@ def _tessellation_bilayer(center_of_masses, boxes, ids, leaflets, threshold=0.01
         # Save the vertices and neighbours
         current_vertices = {}
         current_neighbours = {}
-
         for i, id in enumerate(top_ids):
             current_vertices[id] = current_top_vertices[i]
             current_neighbours[id] = current_top_neighbours[i]
@@ -436,7 +435,7 @@ def _ghosts_bilayer(center_of_masses, positions, ids, leaflets):
     # Isolate the molecules currently processed
     current_coms = center_of_masses[:,ids]
     current_leaflets = leaflets[:,ids]
-
+    
     # Initialize the ghost array
     ghosts = np.copy(current_coms)
     ghosts[:,:,2] = 2*min_position - ghosts[:,:,2]
diff --git a/mllpa/read_simulation.py b/mllpa/read_simulation.py
index fa42412..59aec95 100755
--- a/mllpa/read_simulation.py
+++ b/mllpa/read_simulation.py
@@ -51,18 +51,24 @@ def _get_positions(coordinates_file, type=None, trj=None, heavy=True, type_info=
     # CHECK THE USER INPUTS
 
     # Check the files extensions
-    _check_input_file(coordinates_file, extensions=[".gro"])
+    _check_input_file(coordinates_file, extensions=[".gro",".data"])
     if trj is not None:
-        _check_input_file(trj, extensions=[".xtc", ".trr"])
+        _check_input_file(trj, extensions=[".xtc", ".trr",".lammpsdump",".dat"])
 
     # Load the system and set the time limits
+    resvals = list(np.genfromtxt("data.residues",dtype=str))
+    atom_names=list(np.genfromtxt("atom.names"))
     if trj is None:
         system = Universe(coordinates_file)
+        system.add_TopologyAttr("resname",resvals)
+        system.add_TopologyAttr("names",atom_names)
         begin, end, step = 0, 1, 1
     else:
         system = Universe(coordinates_file, trj)
+        system.add_TopologyAttr("resname",resvals)
+        system.add_TopologyAttr("names",atom_names)
         begin, end, step = _coerce_trajectory(begin, end, step, len(system.trajectory))
-
+        
     # Check if the molecule type exists
     _error_molecule_type(type, np.unique( system.select_atoms("all").resnames ))
 
@@ -81,13 +87,13 @@ def _get_positions(coordinates_file, type=None, trj=None, heavy=True, type_info=
     if heavy:
         selection_text += " and not type H"
     selected_molecules = system.select_atoms(selection_text)
+    
 
     # Extract the required informations
     if type_info is None:
         n_molecules = np.unique( selected_molecules.resids ).shape[0]
     else:
         n_molecules = type_info['n_molecules']
-
     # Read all the frames
     all_frames = []
     all_boxes = []
@@ -144,12 +150,15 @@ def _get_type_info(structure_file, type):
     # CHECK THE USER INPUTS
 
     # Check the extension
-    _check_input_file(structure_file, extensions=[".tpr"])
-
+    _check_input_file(structure_file, extensions=[".tpr",".data"])
+    atom_names=list(np.genfromtxt("atom.names"))
+    resvals=list(np.genfromtxt("data.residues",dtype=str))
     # Load the system
     with warnings.catch_warnings():
         warnings.simplefilter("ignore") # NOTE: Remove auto warning when loading a .tpr file in MDAnalysis
         system = Universe(structure_file)
+        system.add_TopologyAttr("resname",resvals)
+        system.add_TopologyAttr("names",atom_names)
 
     # Check that the type exists
     _error_molecule_type(type, np.unique( system.select_atoms("all").resnames ))
diff --git a/mllpa/system_class.py b/mllpa/system_class.py
index 44e9d58..cb57b97 100755
--- a/mllpa/system_class.py
+++ b/mllpa/system_class.py
@@ -95,16 +95,16 @@ class System:
         # Check that the configurations have been extracted
         if self.coordinates is None or self.distances is None:
             raise ValueError("Coordinates and Distances space are missing. Please use the function openSystem() to generate the instance of the System class.")
-
+        #print("check1",flush=True)
         # Check and extract the models
         trained_models, training_parameters = _get_models_from_source(models)
-
+        #print("check2",flush=True)
         # Format the configurations
         coordinates, distances = _format_input(self.coordinates, self.distances)
-
+        #print("check3",flush=True)
         # Predict the states of the lipids
         phases = makePredictions(coordinates, distances, trained_models)
-
+        #print("check4",flush=True)
         # Reshape the states
         self.phases = np.reshape(phases, (self.positions.shape[0], self.positions.shape[1]))
 
@@ -334,7 +334,7 @@ def _system_to_tessellation(systems):
     for molecule in systems:
 
         # Get the molecule names and IDs
-        current_IDs = molecule.infos['resids']
+        current_IDs = molecule.infos['resids']-1
         current_names = np.array( [molecule.type]*current_IDs.shape[0] )
 
         # Get the positions
@@ -362,6 +362,7 @@ def _system_to_tessellation(systems):
     all_COMs = all_COMs[:,sorting_ids,:]
     all_states = all_states[:,sorting_ids]
 
+
     # Create the instance of the Tessellation class
     representation = Tessellation(all_names, all_IDs, all_COMs, systems[0].boxes, all_states)
 
